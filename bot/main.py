import os
import logging
import sqlite3
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class NutritionBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")

        self.db_path = '/opt/nutrition-bot/data/nutrition.db'
        self.init_db()

    def init_db(self):
        """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î"""
        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)

        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS entries (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                user_name TEXT,
                message_text TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        conn.close()
        logger.info("Database initialized")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç"""
        user = update.effective_user
        await update.message.reply_text(
            f'üçé –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n'
            '–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è. –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ —á—Ç–æ —Ç—ã —Å—ä–µ–ª.\n\n'
            '–ü—Ä–∏–º–µ—Ä—ã:\n'
            '‚Ä¢ "–û–≤—Å—è–Ω–∫–∞ 150–≥"\n' 
            '‚Ä¢ "300 –∫–∫–∞–ª –∫—É—Ä–∏—Ü–∞ –≥—Ä–µ—á–∫–∞"\n'
            '‚Ä¢ "–ó–∞–≤—Ç—Ä–∞–∫: 2 —è–π—Ü–∞, —Ç–æ—Å—Ç"'
        )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = update.effective_user.id
            user_name = update.effective_user.first_name
            text = update.message.text

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(
                'INSERT INTO entries (user_id, user_name, message_text) VALUES (?, ?, ?)',
                (user_id, user_name, text)
            )
            conn.commit()
            conn.close()

            await update.message.reply_text('‚úÖ –ó–∞–ø–∏—Å–∞–ª!')
            logger.info(f"User {user_name} added entry: {text}")

        except Exception as e:
            logger.error(f"Error handling message: {e}")
            await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(self.token).build()

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

        logger.info("Bot starting...")
        application.run_polling()

if __name__ == '__main__':
    bot = NutritionBot()
    bot.run()
